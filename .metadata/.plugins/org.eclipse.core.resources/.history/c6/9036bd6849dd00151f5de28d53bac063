package com.leetCode._2th;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[1,1,2], [1,2,1], and [2,1,1].
 * 
 * @author Zealot
 * @date 2016年2月27日 下午7:34:35 
 *
 */
public class PermutationsII {
	public List<List<Integer>> permuteUnique(int[] nums) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		if(nums.length==0){
			return res;
		}
		int len = nums.length;
		helper(0, new ArrayList<Integer>(), res, nums, len);
		Set<String> set = new HashSet<String>();
		for(List<Integer> l: res){
			StringBuffer sb = new StringBuffer();
			for(Integer i: l){
				sb.append(i).append(" ");
			}
			String str = sb.toString().substring(0, sb.length()-1);
			set.add(str);
		}
		res.clear();
		for(String s: set){
			System.out.println(s);
			String[] ss = s.split(" ");
			
		}
		return res;
    }
	private void helper(int cur, List<Integer> tmp, List<List<Integer>> res, int[] nums, int len) {
		if(tmp.size() == len){
			res.add(new ArrayList<>(tmp));
		}
		for(int i = cur; i< len; i ++){
			tmp.add(nums[i]);
			helper(cur+1, tmp, res, nums, len);
			tmp.remove(tmp.size()-1);
		}
	}
	public static void main(String[] args) {
		PermutationsII p = new PermutationsII();
		int[] a = {1,1,3};
		List<List<Integer>> list = p.permuteUnique(a);
		for(List<Integer> l:list){
//			System.out.println(l.toString());
		}
	}
}
