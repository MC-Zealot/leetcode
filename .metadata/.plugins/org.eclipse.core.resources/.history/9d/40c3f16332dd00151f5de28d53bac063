package com.leetCode._2th;

import java.util.List;

/**
 * Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
 * 
 * @author Zealot
 * @date 2016年2月23日 下午10:56:27 
 *
 */
public class PalindromePartitioning {
	public List<List<String>> partition(String s) {
		
		for(int i = 0; i < s.length(); i++) {
			for(int j = i; j < s.length(); j++){
				String tmp = s.substring(i, j);
				if(isPalindrome(tmp)){
					isPalindrome(String.valueOf(s.charAt(i)));
				}else{
					
				}
			}
		}
		return null;
    }
	private static boolean isPalindrome(String str) {
		for(int i = 0,j=str.length()-1;i < j; i++,j--){
			if(str.charAt(i)!=str.charAt(j)){
				return false;
			}
		}
		return true;
	}
	private boolean[][] getDict(String s)  
	{  
	    boolean[][] dict = new boolean[s.length()][s.length()];  
	    for(int i=s.length()-1;i>=0;i--)  
	    {  
	        for(int j=i;j<s.length();j++)  
	        {  
	            if(s.charAt(i)==s.charAt(j) && ((j-i<2)||dict[i+1][j-1]))  
	            {  
	                dict[i][j] = true;  
	            }  
	        }  
	    }  
	    return dict;  
	}  
}
