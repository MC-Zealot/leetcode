package com.leetCode._2th;

import java.util.List;

/**
 * The set [1,2,3,…,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.
 * 
 * @author Zealot
 * @date 2016年3月6日 下午9:00:57 
 *
 */
public class PermutationSequence {
	String res = "";
	int index = 0;
	public String getPermutation(int n, int k) {
		if(n<=0||k<0){
			return res;
		}
		boolean[] a = new boolean[n];
		backtracing(n, k, a, 0, new ArrayList<Integer>());
		return res;
    }
	private void backtracing(int n, int k, boolean[] a, int cur, List<Integer> list) {
		if(list.size()==n){
			index++;
			if(index==k){
				StringBuffer sb = new StringBuffer();
				for(int i = 0; i < n; i++) {
					sb.append(list.get(i));
				}
				res = sb.toString();
				return ;
			}
			a = new boolean[n];
			return ;
		}
		for(int i = cur; i < n; i++) {
			if(a[i]==false){
				list.add(i);
				backtracing(n, k, a, cur+1, list);
				list.remove(list.size()-1);
			}else{
				a = new boolean[n];
				return;
			}
			if(i==n){
				i=0;
			}
		}
		
	}
}
