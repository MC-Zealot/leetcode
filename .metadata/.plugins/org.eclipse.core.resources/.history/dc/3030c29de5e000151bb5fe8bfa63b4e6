package com.leetCode._2th;
/**
 * Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
 * 
 * @author Zealot
 * @date 2016年3月3日 上午9:51:47 
 *
 */
public class NextPermutation {
	public void nextPermutation(int[] nums) {
		if(nums.length==0||nums.length==1){
			return ;
		}
		//Find the largest index k, such that A[k]<A[k+1].
		int k = -1;
        for(int i = nums.length-1; i > 0; i--) {
        	if(nums[i]>nums[i-1]){
        		k=i-1;
        		break;
        	}
        }
        if(k==-1){
        	//翻转
        	 for(int i = 0,j = nums.length-1; i < j; i++,j--){
             	int tmp2 = nums[i];
                 nums[i] = nums[j];
                 nums[j] = tmp2;
             }
        }
        int l = -1;
        for(int i = nums.length-1; i > 0; i--){
        	if(nums[i]>nums[k]){
        		l = i;
        		break;
        	}
        }
        int tmp = nums[k];
        nums[k] = nums[l];
        nums[l] = tmp;
        //从l开始翻转
        for(int i = l,j = nums.length-1; i < j; i++,j--){
        	int tmp2 = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp2;
        }
        
    }	
	public static void main(String[] args) {
		NextPermutation n = new NextPermutation();
		int[] a = {1,3,2};
		n.nextPermutation(a)
	}
}
