package com.leetCode._2th;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 * Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
UPDATE (2016/2/13):
The return format had been changed to zero-based indices. Please read the above updated description carefully.

 * @author Zealot
 * @date 2016年3月7日 下午12:07:33 
 *
 */
public class TwoSum {
	int[] res = new int[2];
	public int[] twoSum(int[] nums, int target) {
		backTracing(nums, target, 0, new ArrayList<Integer>());
		return res;
    }
	private void backTracing(int[] nums, int target, int cur, List<Integer> list) {
		if(list.size()==2){
			int sum = list.get(0)+list.get(1);
			System.out.println(list.get(0)+"+"+list.get(1)+"="+sum);
			if(sum==target){
				res[0] = list.get(0);
				res[1] = list.get(1);
			}
			
			return ;
		}
		for(int i = cur; i < nums.length; i++) {
			list.add(nums[i]);
			backTracing(nums, target, cur+1, list);
			list.remove(list.size()-1);
		}
	}
	public static void main(String[] args) {
		int[] a = {2, 7, 11, 15};
		TwoSum t = new TwoSum();
		t.twoSum(a, 13);
		System.out.println(a[0]);
		System.out.println(a[1]);
	}
}
